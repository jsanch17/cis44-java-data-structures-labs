
import java.util.Scanner;

// given template used 
    // Step 1: Define the interface
    interface Polygon {
        double area();
        double perimeter();
    }

    // Step 2: Implement a base class for a specific shape
    class Quadrilateral implements Polygon {
        // What attributes do all quadrilaterals have?
        //attributes added, four sides
        protected double a;
        protected double b;
        protected double c;
        protected double d;
        public Quadrilateral(double a, double b, double c, double d) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
        }


        @Override
        public double area() {
            // To be implemented by subclasses
            // could mess with the program 
            return 0;
        }

        @Override
        public double perimeter() {
            // To be implemented by subclasses
            // perimeter formula
            return a+b+c+d;
        }
    }

    // Step 3: Create a subclass using inheritance
    class Rectangle extends Quadrilateral {
        protected double length;
        protected double width;

        public Rectangle(double length, double width) {
            super(length, width, length, width);
            this.length = length;
            this.width = width;
        }

        @Override
        public double area() {
            return length * width;
        }

        @Override
        public double perimeter() {
            return super.perimeter();
        }
    }

    // Step 4: Create a more specific subclass
    class Square extends Rectangle {
        public Square(double side) {
            // How do you call the Rectangle constructor from here?
            //super function is able to call upon 
            super(side, side);
        }
    }//triangle concrete class
    class Triangle implements Polygon{
        protected double a;
        protected double b;
        protected double c;
        public  Triangle(double a, double b, double c) {
            this.a = a;
            this.b = b;
            this.c = c;
        }
        @Override
        public double area() {
            double p = (a+b+c)/2;
            return Math.sqrt(p*(p-a)*(p-b)*(p-c));
        }
        @Override
        public double perimeter() {
            return a+b+c;
        }
    }//using super function to call the super class. isocsceles derivative of triangle
    class IsoscelesTriangle extends Triangle{
        public IsoscelesTriangle(double a, double b) {
            super(a,a,b);
        }
    }//using super function to call the super class. equalilateral triangle a derivative of triangle
    class equalTriangle extends Triangle{
        public equalTriangle(double a) {
            super(a,a,a);
        }
    }//new concrete class for polygons
    class RegularPolygon implements Polygon{
        protected double a;
        protected double b;
        public  RegularPolygon(double a, double b) {
        //ensures sides of polygon are able to be called upon
            this.a = a;
            this.b = b;
        }//area formula for polygons
        @Override
        public double area() {
            return  a*b*b/(4*Math.tan(Math.PI/a));
        }//perimeter formula for polygons
        @Override
        public double perimeter() {
            return a*b;
        }
    }//using super function to call the super class
    class Pentagon extends RegularPolygon{
        public Pentagon(double b) {
            super(5,b);
        }
    }//using super function to call the super class
    class Hexagon extends RegularPolygon{
        public Hexagon(double b) {
            super(6,b);
        }
    }//using super function to call the super class
    class Octagon extends RegularPolygon{
        public Octagon(double b) {
            super(8,b);
        }
    }

    // Main class for user interface
    public class PolygonCalculator {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Polygon polygon = null;
// while loop to make sure that the program continues
            while (true) {
                 System.out.println("1. Triangle\n2. Isosceles Triangle\n3. Equilateral Triangle\n" +
                        "4. Rectangle\n5. Square\n6. Pentagon\n7. Hexagon\n8. Octagon\n0. Exit\n");

                int choice = scanner.nextInt();
                //if statement to 
                if (choice == 0) break;
//switch case for ease of use
                switch (choice) {
                    case 1:
                        System.out.print("Enter sides a, b, c: ");
                        polygon = new Triangle(scanner.nextDouble(), scanner.nextDouble(), scanner.nextDouble());
                        break;
                    case 2:
                        System.out.print("Enter equal side and base: ");
                        polygon = new IsoscelesTriangle(scanner.nextDouble(), scanner.nextDouble());
                        break;
                    case 3:
                        System.out.print("Enter side: ");
                        polygon = new equalTriangle(scanner.nextDouble());
                        break;
                    case 4:
                        System.out.print("Enter length and width: ");
                        polygon = new Rectangle(scanner.nextDouble(), scanner.nextDouble());
                        break;
                    case 5:
                        System.out.print("Enter side: ");
                        polygon = new Square(scanner.nextDouble());
                        break;
                    case 6:
                        System.out.print("Enter side length: ");
                        polygon = new Pentagon(scanner.nextDouble());
                        break;
                    case 7:
                        System.out.print("Enter side length: ");
                        polygon = new Hexagon(scanner.nextDouble());
                        break;
                    case 8:
                        System.out.print("Enter side length: ");
                        polygon = new Octagon(scanner.nextDouble());
                        break;
                    default:
                        System.out.println("Invalid choice!");
                        continue;
                }

                if (polygon != null) {
                    System.out.printf("Area: %.2f\n", polygon.area());
                    System.out.printf("Perimeter: %.2f\n", polygon.perimeter());
                }
            }
//when program ends. goodbye statement
            scanner.close();
            System.out.println("Goodbye.");
        }
    }

